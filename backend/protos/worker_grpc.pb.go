// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerClient interface {
	Assign(ctx context.Context, in *Case, opts ...grpc.CallOption) (*Response, error)
	Unassign(ctx context.Context, in *Case, opts ...grpc.CallOption) (*Response, error)
	SetWorkerSkills(ctx context.Context, in *WorkerSkill, opts ...grpc.CallOption) (*Response, error)
	Hello(ctx context.Context, in *Response, opts ...grpc.CallOption) (*Response, error)
	GetCaseState(ctx context.Context, in *Case, opts ...grpc.CallOption) (Worker_GetCaseStateClient, error)
	KillWorker(ctx context.Context, in *Response, opts ...grpc.CallOption) (*Response, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) Assign(ctx context.Context, in *Case, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/worker.Worker/Assign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) Unassign(ctx context.Context, in *Case, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/worker.Worker/Unassign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) SetWorkerSkills(ctx context.Context, in *WorkerSkill, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/worker.Worker/SetWorkerSkills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) Hello(ctx context.Context, in *Response, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/worker.Worker/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) GetCaseState(ctx context.Context, in *Case, opts ...grpc.CallOption) (Worker_GetCaseStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[0], "/worker.Worker/GetCaseState", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerGetCaseStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_GetCaseStateClient interface {
	Recv() (*CaseProgress, error)
	grpc.ClientStream
}

type workerGetCaseStateClient struct {
	grpc.ClientStream
}

func (x *workerGetCaseStateClient) Recv() (*CaseProgress, error) {
	m := new(CaseProgress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) KillWorker(ctx context.Context, in *Response, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/worker.Worker/KillWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServer is the server API for Worker service.
// All implementations must embed UnimplementedWorkerServer
// for forward compatibility
type WorkerServer interface {
	Assign(context.Context, *Case) (*Response, error)
	Unassign(context.Context, *Case) (*Response, error)
	SetWorkerSkills(context.Context, *WorkerSkill) (*Response, error)
	Hello(context.Context, *Response) (*Response, error)
	GetCaseState(*Case, Worker_GetCaseStateServer) error
	KillWorker(context.Context, *Response) (*Response, error)
	mustEmbedUnimplementedWorkerServer()
}

// UnimplementedWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (UnimplementedWorkerServer) Assign(context.Context, *Case) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assign not implemented")
}
func (UnimplementedWorkerServer) Unassign(context.Context, *Case) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unassign not implemented")
}
func (UnimplementedWorkerServer) SetWorkerSkills(context.Context, *WorkerSkill) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWorkerSkills not implemented")
}
func (UnimplementedWorkerServer) Hello(context.Context, *Response) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedWorkerServer) GetCaseState(*Case, Worker_GetCaseStateServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCaseState not implemented")
}
func (UnimplementedWorkerServer) KillWorker(context.Context, *Response) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillWorker not implemented")
}
func (UnimplementedWorkerServer) mustEmbedUnimplementedWorkerServer() {}

// UnsafeWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServer will
// result in compilation errors.
type UnsafeWorkerServer interface {
	mustEmbedUnimplementedWorkerServer()
}

func RegisterWorkerServer(s grpc.ServiceRegistrar, srv WorkerServer) {
	s.RegisterService(&Worker_ServiceDesc, srv)
}

func _Worker_Assign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Case)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Assign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/Assign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Assign(ctx, req.(*Case))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_Unassign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Case)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Unassign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/Unassign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Unassign(ctx, req.(*Case))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_SetWorkerSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerSkill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).SetWorkerSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/SetWorkerSkills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).SetWorkerSkills(ctx, req.(*WorkerSkill))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Response)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Hello(ctx, req.(*Response))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_GetCaseState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Case)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).GetCaseState(m, &workerGetCaseStateServer{stream})
}

type Worker_GetCaseStateServer interface {
	Send(*CaseProgress) error
	grpc.ServerStream
}

type workerGetCaseStateServer struct {
	grpc.ServerStream
}

func (x *workerGetCaseStateServer) Send(m *CaseProgress) error {
	return x.ServerStream.SendMsg(m)
}

func _Worker_KillWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Response)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).KillWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/KillWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).KillWorker(ctx, req.(*Response))
	}
	return interceptor(ctx, in, info, handler)
}

// Worker_ServiceDesc is the grpc.ServiceDesc for Worker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Worker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "worker.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Assign",
			Handler:    _Worker_Assign_Handler,
		},
		{
			MethodName: "Unassign",
			Handler:    _Worker_Unassign_Handler,
		},
		{
			MethodName: "SetWorkerSkills",
			Handler:    _Worker_SetWorkerSkills_Handler,
		},
		{
			MethodName: "Hello",
			Handler:    _Worker_Hello_Handler,
		},
		{
			MethodName: "KillWorker",
			Handler:    _Worker_KillWorker_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCaseState",
			Handler:       _Worker_GetCaseState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/worker.proto",
}
