// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClockClient is the client API for Clock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClockClient interface {
	Register(ctx context.Context, in *WorkerRegister, opts ...grpc.CallOption) (Clock_RegisterClient, error)
}

type clockClient struct {
	cc grpc.ClientConnInterface
}

func NewClockClient(cc grpc.ClientConnInterface) ClockClient {
	return &clockClient{cc}
}

func (c *clockClient) Register(ctx context.Context, in *WorkerRegister, opts ...grpc.CallOption) (Clock_RegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &Clock_ServiceDesc.Streams[0], "/clock.Clock/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &clockRegisterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Clock_RegisterClient interface {
	Recv() (*Tick, error)
	grpc.ClientStream
}

type clockRegisterClient struct {
	grpc.ClientStream
}

func (x *clockRegisterClient) Recv() (*Tick, error) {
	m := new(Tick)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClockServer is the server API for Clock service.
// All implementations must embed UnimplementedClockServer
// for forward compatibility
type ClockServer interface {
	Register(*WorkerRegister, Clock_RegisterServer) error
	mustEmbedUnimplementedClockServer()
}

// UnimplementedClockServer must be embedded to have forward compatible implementations.
type UnimplementedClockServer struct {
}

func (UnimplementedClockServer) Register(*WorkerRegister, Clock_RegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedClockServer) mustEmbedUnimplementedClockServer() {}

// UnsafeClockServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClockServer will
// result in compilation errors.
type UnsafeClockServer interface {
	mustEmbedUnimplementedClockServer()
}

func RegisterClockServer(s grpc.ServiceRegistrar, srv ClockServer) {
	s.RegisterService(&Clock_ServiceDesc, srv)
}

func _Clock_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkerRegister)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClockServer).Register(m, &clockRegisterServer{stream})
}

type Clock_RegisterServer interface {
	Send(*Tick) error
	grpc.ServerStream
}

type clockRegisterServer struct {
	grpc.ServerStream
}

func (x *clockRegisterServer) Send(m *Tick) error {
	return x.ServerStream.SendMsg(m)
}

// Clock_ServiceDesc is the grpc.ServiceDesc for Clock service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Clock_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clock.Clock",
	HandlerType: (*ClockServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _Clock_Register_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/clock.proto",
}
