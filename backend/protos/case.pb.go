//Define what the customer is supposed to do

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.0
// source: protos/case.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SkillEnum int32

const (
	SkillEnum_Troubleshoot SkillEnum = 0
	SkillEnum_Build        SkillEnum = 1
	SkillEnum_Research     SkillEnum = 2
	SkillEnum_WebTech      SkillEnum = 3
	SkillEnum_Admin        SkillEnum = 4
	SkillEnum_Usage        SkillEnum = 5
	SkillEnum_Architecture SkillEnum = 6
	SkillEnum_Ecosystem    SkillEnum = 7
	SkillEnum_Explain      SkillEnum = 8
	SkillEnum_Empathy      SkillEnum = 9
)

// Enum value maps for SkillEnum.
var (
	SkillEnum_name = map[int32]string{
		0: "Troubleshoot",
		1: "Build",
		2: "Research",
		3: "WebTech",
		4: "Admin",
		5: "Usage",
		6: "Architecture",
		7: "Ecosystem",
		8: "Explain",
		9: "Empathy",
	}
	SkillEnum_value = map[string]int32{
		"Troubleshoot": 0,
		"Build":        1,
		"Research":     2,
		"WebTech":      3,
		"Admin":        4,
		"Usage":        5,
		"Architecture": 6,
		"Ecosystem":    7,
		"Explain":      8,
		"Empathy":      9,
	}
)

func (x SkillEnum) Enum() *SkillEnum {
	p := new(SkillEnum)
	*p = x
	return p
}

func (x SkillEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SkillEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_case_proto_enumTypes[0].Descriptor()
}

func (SkillEnum) Type() protoreflect.EnumType {
	return &file_protos_case_proto_enumTypes[0]
}

func (x SkillEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SkillEnum.Descriptor instead.
func (SkillEnum) EnumDescriptor() ([]byte, []int) {
	return file_protos_case_proto_rawDescGZIP(), []int{0}
}

type CaseStatus int32

const (
	CaseStatus_New        CaseStatus = 0
	CaseStatus_Assigned   CaseStatus = 1
	CaseStatus_InProgress CaseStatus = 2
	CaseStatus_WOCR       CaseStatus = 3
	CaseStatus_Closed     CaseStatus = 4
)

// Enum value maps for CaseStatus.
var (
	CaseStatus_name = map[int32]string{
		0: "New",
		1: "Assigned",
		2: "InProgress",
		3: "WOCR",
		4: "Closed",
	}
	CaseStatus_value = map[string]int32{
		"New":        0,
		"Assigned":   1,
		"InProgress": 2,
		"WOCR":       3,
		"Closed":     4,
	}
)

func (x CaseStatus) Enum() *CaseStatus {
	p := new(CaseStatus)
	*p = x
	return p
}

func (x CaseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CaseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_case_proto_enumTypes[1].Descriptor()
}

func (CaseStatus) Type() protoreflect.EnumType {
	return &file_protos_case_proto_enumTypes[1]
}

func (x CaseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CaseStatus.Descriptor instead.
func (CaseStatus) EnumDescriptor() ([]byte, []int) {
	return file_protos_case_proto_rawDescGZIP(), []int{1}
}

type StageStatus int32

const (
	StageStatus_Working   StageStatus = 0
	StageStatus_Completed StageStatus = 1
)

// Enum value maps for StageStatus.
var (
	StageStatus_name = map[int32]string{
		0: "Working",
		1: "Completed",
	}
	StageStatus_value = map[string]int32{
		"Working":   0,
		"Completed": 1,
	}
)

func (x StageStatus) Enum() *StageStatus {
	p := new(StageStatus)
	*p = x
	return p
}

func (x StageStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StageStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_case_proto_enumTypes[2].Descriptor()
}

func (StageStatus) Type() protoreflect.EnumType {
	return &file_protos_case_proto_enumTypes[2]
}

func (x StageStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StageStatus.Descriptor instead.
func (StageStatus) EnumDescriptor() ([]byte, []int) {
	return file_protos_case_proto_rawDescGZIP(), []int{2}
}

type Case struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaseID            int32        `protobuf:"varint,1,opt,name=CaseID,proto3" json:"CaseID,omitempty"`
	Assignee          int32        `protobuf:"varint,2,opt,name=Assignee,proto3" json:"Assignee,omitempty"`
	CustomerID        int32        `protobuf:"varint,3,opt,name=CustomerID,proto3" json:"CustomerID,omitempty"` //Which customer is it
	CurrentStage      int32        `protobuf:"varint,4,opt,name=CurrentStage,proto3" json:"CurrentStage,omitempty"`
	CustomerSentiment int32        `protobuf:"varint,5,opt,name=CustomerSentiment,proto3" json:"CustomerSentiment,omitempty"` //Customer's current sentiment of the case (range between 1, 2, 3, 4, 5 (5 being happy))
	CaseStages        []*CaseStage `protobuf:"bytes,6,rep,name=CaseStages,proto3" json:"CaseStages,omitempty"`
	Status            CaseStatus   `protobuf:"varint,7,opt,name=Status,proto3,enum=case.CaseStatus" json:"Status,omitempty"`
}

func (x *Case) Reset() {
	*x = Case{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_case_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Case) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Case) ProtoMessage() {}

func (x *Case) ProtoReflect() protoreflect.Message {
	mi := &file_protos_case_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Case.ProtoReflect.Descriptor instead.
func (*Case) Descriptor() ([]byte, []int) {
	return file_protos_case_proto_rawDescGZIP(), []int{0}
}

func (x *Case) GetCaseID() int32 {
	if x != nil {
		return x.CaseID
	}
	return 0
}

func (x *Case) GetAssignee() int32 {
	if x != nil {
		return x.Assignee
	}
	return 0
}

func (x *Case) GetCustomerID() int32 {
	if x != nil {
		return x.CustomerID
	}
	return 0
}

func (x *Case) GetCurrentStage() int32 {
	if x != nil {
		return x.CurrentStage
	}
	return 0
}

func (x *Case) GetCustomerSentiment() int32 {
	if x != nil {
		return x.CustomerSentiment
	}
	return 0
}

func (x *Case) GetCaseStages() []*CaseStage {
	if x != nil {
		return x.CaseStages
	}
	return nil
}

func (x *Case) GetStatus() CaseStatus {
	if x != nil {
		return x.Status
	}
	return CaseStatus_New
}

type CaseStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageID       int32       `protobuf:"varint,1,opt,name=StageID,proto3" json:"StageID,omitempty"`
	Type          SkillEnum   `protobuf:"varint,2,opt,name=Type,proto3,enum=case.SkillEnum" json:"Type,omitempty"`
	Status        StageStatus `protobuf:"varint,3,opt,name=Status,proto3,enum=case.StageStatus" json:"Status,omitempty"` //Completed, vs In-progress
	Difficulty    int32       `protobuf:"varint,4,opt,name=Difficulty,proto3" json:"Difficulty,omitempty"`               //1-5 Set by the customer.
	Totalwork     int32       `protobuf:"varint,5,opt,name=Totalwork,proto3" json:"Totalwork,omitempty"`                 //Total amount of work to be done. triage and comms have less work, while research has more.
	Completedwork int32       `protobuf:"varint,6,opt,name=Completedwork,proto3" json:"Completedwork,omitempty"`         //How much work has been compelted so far.
}

func (x *CaseStage) Reset() {
	*x = CaseStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_case_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseStage) ProtoMessage() {}

func (x *CaseStage) ProtoReflect() protoreflect.Message {
	mi := &file_protos_case_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseStage.ProtoReflect.Descriptor instead.
func (*CaseStage) Descriptor() ([]byte, []int) {
	return file_protos_case_proto_rawDescGZIP(), []int{1}
}

func (x *CaseStage) GetStageID() int32 {
	if x != nil {
		return x.StageID
	}
	return 0
}

func (x *CaseStage) GetType() SkillEnum {
	if x != nil {
		return x.Type
	}
	return SkillEnum_Troubleshoot
}

func (x *CaseStage) GetStatus() StageStatus {
	if x != nil {
		return x.Status
	}
	return StageStatus_Working
}

func (x *CaseStage) GetDifficulty() int32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *CaseStage) GetTotalwork() int32 {
	if x != nil {
		return x.Totalwork
	}
	return 0
}

func (x *CaseStage) GetCompletedwork() int32 {
	if x != nil {
		return x.Completedwork
	}
	return 0
}

var File_protos_case_proto protoreflect.FileDescriptor

var file_protos_case_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x61, 0x73, 0x65, 0x22, 0x87, 0x02, 0x0a, 0x04, 0x43, 0x61,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53,
	0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x43, 0x61, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63,
	0x61, 0x73, 0x65, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x43,
	0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x61, 0x73, 0x65,
	0x2e, 0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x09, 0x43, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x61, 0x73, 0x65,
	0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x29, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x44,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x77, 0x6f, 0x72, 0x6b, 0x2a,
	0x94, 0x01, 0x0a, 0x09, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x72, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x68, 0x6f, 0x6f, 0x74, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x65, 0x62, 0x54,
	0x65, 0x63, 0x68, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x04,
	0x12, 0x09, 0x0a, 0x05, 0x55, 0x73, 0x61, 0x67, 0x65, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x10, 0x06, 0x12, 0x0d, 0x0a,
	0x09, 0x45, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x6d, 0x70,
	0x61, 0x74, 0x68, 0x79, 0x10, 0x09, 0x2a, 0x49, 0x0a, 0x0a, 0x43, 0x61, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x65, 0x77, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x49,
	0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x57,
	0x4f, 0x43, 0x52, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10,
	0x04, 0x2a, 0x29, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0b, 0x0a, 0x07, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x01, 0x42, 0x3f, 0x5a, 0x3d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x42, 0x61, 0x6e, 0x61, 0x6e,
	0x61, 0x2d, 0x6e, 0x6f, 0x2d, 0x61, 0x6e, 0x61, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x2d, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x74, 0x79, 0x63, 0x6f, 0x6f, 0x6e, 0x2f, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_case_proto_rawDescOnce sync.Once
	file_protos_case_proto_rawDescData = file_protos_case_proto_rawDesc
)

func file_protos_case_proto_rawDescGZIP() []byte {
	file_protos_case_proto_rawDescOnce.Do(func() {
		file_protos_case_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_case_proto_rawDescData)
	})
	return file_protos_case_proto_rawDescData
}

var file_protos_case_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_protos_case_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_protos_case_proto_goTypes = []interface{}{
	(SkillEnum)(0),    // 0: case.SkillEnum
	(CaseStatus)(0),   // 1: case.CaseStatus
	(StageStatus)(0),  // 2: case.StageStatus
	(*Case)(nil),      // 3: case.Case
	(*CaseStage)(nil), // 4: case.CaseStage
}
var file_protos_case_proto_depIdxs = []int32{
	4, // 0: case.Case.CaseStages:type_name -> case.CaseStage
	1, // 1: case.Case.Status:type_name -> case.CaseStatus
	0, // 2: case.CaseStage.Type:type_name -> case.SkillEnum
	2, // 3: case.CaseStage.Status:type_name -> case.StageStatus
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_protos_case_proto_init() }
func file_protos_case_proto_init() {
	if File_protos_case_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_case_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Case); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_case_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaseStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_case_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_case_proto_goTypes,
		DependencyIndexes: file_protos_case_proto_depIdxs,
		EnumInfos:         file_protos_case_proto_enumTypes,
		MessageInfos:      file_protos_case_proto_msgTypes,
	}.Build()
	File_protos_case_proto = out.File
	file_protos_case_proto_rawDesc = nil
	file_protos_case_proto_goTypes = nil
	file_protos_case_proto_depIdxs = nil
}
