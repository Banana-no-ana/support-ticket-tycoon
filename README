## Getting started

Launch the clock with: go run backend/clock.go
    Clock listens on HTTP-7000, RPC-8000
launch a worker with: backend/ go run worker.go
    The worker listens to rpc on port 8080 by default. 
    API Created workers run on 9000+workerID (HTTP), 10000+workerID (RPC)
launch an apiserver with: backend/ go run api.go
    API server listens on 8001 on HTTP (Frontend), 8002 on RPC (Backend)
Launch the customer server with: backend/ go run customer.go
    Customer Server listens on 8005 (HTTP), and 8006 (RPC)
Launch an image server with: tstgameAssets/processed/ sudo docker run -p 80:80 host-images
    Images are served on :80 
Launch a customer server with backend/ go run customer.go 
    Listens on :8020 (HTTP), and :8021 (RPC)
Launch UI starting in /frontend/tstgui/, then flutter run -d chrome
    UI directly connects with API server on HTTP endpoint


Create a case in the API server: 
    http://localhost:8001/case/create
Create a worker with the API server:
    http://localhost:8001/worker/create
    It will listen on 9101 (HTTP) and 10101(RPC)
Manually register worker with API server:
    curl -X POST localhost:8001/case/assign -d '{"WorkerID": 202, "Name" : "Test Worker 202"}'



Assign case directly with API server: 
    curl -X POST localhost:8001/case/assign -d '{"CaseID": 12, "WorkerID": 1}'



To re-generate protos: 
GO: $ protoc --go_out=. --go_opt=paths=source_relative \
    --go-grpc_out=. --go-grpc_opt=paths=source_relative \
    protos/worker.proto

To regenerate docker file for serving images: 
    sudo docker build -t host-images .
    sudo docker run -p 80:80 host-images
