// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssignClient is the client API for Assign service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssignClient interface {
	Assign(ctx context.Context, in *Case, opts ...grpc.CallOption) (*Response, error)
	UnAssign(ctx context.Context, in *Case, opts ...grpc.CallOption) (*Response, error)
}

type assignClient struct {
	cc grpc.ClientConnInterface
}

func NewAssignClient(cc grpc.ClientConnInterface) AssignClient {
	return &assignClient{cc}
}

func (c *assignClient) Assign(ctx context.Context, in *Case, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/casemanagement.Assign/Assign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignClient) UnAssign(ctx context.Context, in *Case, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/casemanagement.Assign/UnAssign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssignServer is the server API for Assign service.
// All implementations must embed UnimplementedAssignServer
// for forward compatibility
type AssignServer interface {
	Assign(context.Context, *Case) (*Response, error)
	UnAssign(context.Context, *Case) (*Response, error)
	mustEmbedUnimplementedAssignServer()
}

// UnimplementedAssignServer must be embedded to have forward compatible implementations.
type UnimplementedAssignServer struct {
}

func (UnimplementedAssignServer) Assign(context.Context, *Case) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assign not implemented")
}
func (UnimplementedAssignServer) UnAssign(context.Context, *Case) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnAssign not implemented")
}
func (UnimplementedAssignServer) mustEmbedUnimplementedAssignServer() {}

// UnsafeAssignServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssignServer will
// result in compilation errors.
type UnsafeAssignServer interface {
	mustEmbedUnimplementedAssignServer()
}

func RegisterAssignServer(s grpc.ServiceRegistrar, srv AssignServer) {
	s.RegisterService(&Assign_ServiceDesc, srv)
}

func _Assign_Assign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Case)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignServer).Assign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/casemanagement.Assign/Assign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignServer).Assign(ctx, req.(*Case))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assign_UnAssign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Case)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignServer).UnAssign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/casemanagement.Assign/UnAssign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignServer).UnAssign(ctx, req.(*Case))
	}
	return interceptor(ctx, in, info, handler)
}

// Assign_ServiceDesc is the grpc.ServiceDesc for Assign service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Assign_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "casemanagement.Assign",
	HandlerType: (*AssignServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Assign",
			Handler:    _Assign_Assign_Handler,
		},
		{
			MethodName: "UnAssign",
			Handler:    _Assign_UnAssign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "casemanagement.proto",
}
